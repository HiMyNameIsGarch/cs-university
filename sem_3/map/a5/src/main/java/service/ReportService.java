package service;

import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.UUID;
import domain.Car;
import domain.Rental;
import domain.RentalStatus;
import java.util.stream.StreamSupport;

import repository.CarDatabaseRepository;
import repository.RentalRepository;

public class ReportService {

    private final CarDatabaseRepository carRepository;
    private final RentalRepository rentalRepository;

    public ReportService(CarDatabaseRepository carRepository, RentalRepository rentalRepository) {
        this.carRepository = carRepository;
        this.rentalRepository = rentalRepository;
    }

    // Helper to convert Iterable to Stream
    private <T> Stream<T> toStream(Iterable<T> iterable) {
        return StreamSupport.stream(iterable.spliterator(), false);
    }

    // 1. The names of persons who booked a certain car
    public List<String> getClientsByCar(UUID carId) {
        return toStream(rentalRepository.getAll())
                .filter(rental -> rental.getCarToReserve().equals(carId))
                .map(Rental::getClientName)
                .distinct() // Remove duplicates
                .collect(Collectors.toList());
    }

    // 2. All cars rented by a certain person
    public List<Car> getCarsRentedByPerson(String clientName) {
        return toStream(rentalRepository.getAll())
                .filter(rental -> rental.getClientName().equalsIgnoreCase(clientName))
                .map(rental -> carRepository.findById(rental.getCarToReserve()))
                .filter(Objects::nonNull) // Exclude null results
                .collect(Collectors.toList());
    }

    // 3. Count of rentals by status
    public Map<RentalStatus, Long> getRentalCountByStatus() {
        return toStream(rentalRepository.getAll())
                .collect(Collectors.groupingBy(Rental::getStatus, Collectors.counting()));
    }

    // 4. Total revenue generated by rentals
    public double getTotalRevenue() {
        return toStream(rentalRepository.getAll())
                .mapToDouble(Rental::getTotalPrice)
                .sum();
    }

    // 5. Cars that were rented at least once
    public List<Car> getCarsRentedAtLeastOnce() {
        return toStream(rentalRepository.getAll())
                .map(Rental::getCarToReserve)
                .distinct()
                .map(carRepository::findById)
                .filter(Objects::nonNull) // Exclude null results
                .collect(Collectors.toList());
    }
}
